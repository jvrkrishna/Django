In Django, you send data from a view to a template using the **context dictionary**. Here's a simple step-by-step guide:

### **1. Create a View in `views.py`**

You pass data to the template by including it in a dictionary (commonly named `context`), then use `render()` to send it along with the request.

```python
from django.shortcuts import render

def my_view(request):
    data = {
        'name': 'Alice',
        'age': 30,
        'items': ['Apples', 'Bananas', 'Cherries']
    }
    return render(request, 'my_template.html', context=data)
```

### **2. Create a Template (e.g., `my_template.html`)**

Use Django template syntax to access the data passed from the view.

```html
<!DOCTYPE html>
<html>
<head>
    <title>My Template</title>
</head>
<body>
    <h1>Hello, {{ name }}!</h1>
    <p>Age: {{ age }}</p>
    <ul>
        {% for item in items %}
            <li>{{ item }}</li>
        {% endfor %}
    </ul>
</body>
</html>
```

### **3. Map the View in `urls.py`**

```python
from django.urls import path
from .views import my_view

urlpatterns = [
    path('', my_view, name='home'),
]
```

### Summary:

* **`context`** is a dictionary where keys are the variable names you'll use in the template.
* Use `render(request, template_name, context)` to connect your view to a template with data.

If you're using **class-based views**, you pass context by overriding the `get_context_data` method.

Let me know if you want an example with a model or class-based view.

Write HTML and Django template syntax:
    --In your HTML files, you can use standard HTML along with Django's template language syntax. This allows you to insert dynamic content, use control structures (like loops and conditionals), and access variables passed from your views.
    --Variables: Use double curly braces {{ variable_name }} to display values from the context.
    --Tags: Use {% tag_name %} for logic and control flow, such as loops (for) and conditional statements (if).
    --Filters: Use filters to modify variable output, for example {{ variable_name|filter_name }}.

Load and render templates in views:
    --In your Django views, use the render() function to load and render your templates. Pass a context dictionary to the render() function containing the data you want to display in the template.
Python

    from django.shortcuts import render
    
    def my_view(request):
        context = {
            'variable1': 'Hello',
            'variable2': 'World',
        }
        return render(request, 'my_template.html', context)
        
Use template inheritance (optional): Create a base template with common elements (e.g., header, footer). Use the {% extends %} tag in other templates to inherit from the base template and the {% block %} tag to define replaceable content sections.