Project No: 0009
Project Name: Sample_Project
Step by Step Process Settings file and directories
**********************************************
In this  I will teach you how to change the necessary settings in the Django settings file. There are 6 things you must change when you start a Django project and when you deploy the project you must change some more settings.
here I discussed the necessary settings for development and also deployment of the Django project. they are below

1. Templates
2. Static files
3. Media files
4. Database setup
5. Timezone
6. Apps


Step 1: Create Project and App
>mkdir 0009
>cd 0009
>django-admin startproject Sample_Project
>cd Sample_Project
>python manage.py startapp App1

Step 2: Register the App
ðŸ“„ Sample_Project/settings.py
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'App1',   # âœ… add your app
]

Step 3: Template Setup
Create templates folder at project level or app level:
>mkdir templates

Template setup in Django project
let's open your settings.py in your Django project folder and open settings.py. Go to the Templates attribute and change the path like below. Make sure you must create a folder name called templates outside of the project folder or inside of each app level.

ðŸ“„ settings.py for project level

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],  # âœ… point to templates folder
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

this can help you to render your templates in your Django project level. all our template files like index.html, about.html, and signup.html must be inside of the templates folder.

ðŸ“„settings.py for app level
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [], # project-level templates if you add any
        'APP_DIRS': True,  # ðŸ‘ˆ enables app-level templates
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

Step 4. Static files
we need to add styles, colors, and animations to our templates, so we need to configure the static files. Go to end of your settings.py file, there you find an attribute called STATIC_URL, write the below code.

ðŸ“„Project level static files
#At the bottom
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static") ]# this is your static folder
STATIC_ROOT = os.path.join(BASE_DIR, 'assets') #this is you assets folder.

# Collect static files from each app automatically
# For production (collectstatic):
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

ðŸ“„App level static files
#At the bottom
STATIC_URL = '/static/'
STATICFILES_DIRS = []   # leave empty if only using app-level static
STATIC_ROOT = []   # leave empty if only using app-level static

# Collect static files from each app automatically
# For production (collectstatic):
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

Here we are creating 2 folders called static and assets. In the static folder, we store CSS and javascript and other files regarding styling.

In assets folder we collect all the static files and images and store in it and also we render all static files and images from that one folder assets.

Step 5. Media files
we need to store and retrieve media files in our project. so we definitely configure that media, so create a new folder called media. let's configure that media in settings.py file.

ðŸ“„Project level Media files(Best Practice)
# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

ðŸ“„App level Media files
# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'App1', 'media')

Note: we must configure those static files and media files in urls.py because those are rendering through URLs. copy the below code and paste in urls.py file in the Django project folder.

from django.conf import settings
from django.conf.urls.static import static
urlpatterns = [
    path('admin/', admin.site.urls),
    # add other urls here...
]

if settings.DEBUG==False:  # âœ… serve static and media in dev mode
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

Step 6. Configure the Database(Optional MYSQL setup)
In our Django project, SQLite is the default database. If we want, we can configure the other databases also. let's change your database by using this code. Here I configure the MySQL database.

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'DB_NAME',
        'USER': 'DB_USER',
        'PASSWORD': 'DB_PASSWORD',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}

In the same way, we can configure the other databases also.

Step 7. Setup your Time zone
we know we are from the same programming community python but we are from different time zones. so let's configure your timezone in your Django project. I am from India, so I set my time zone to India. check your timezones here.

TIME_ZONE = 'Asia/Kolkata'
