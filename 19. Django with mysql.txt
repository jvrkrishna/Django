ORM (Object-Relational Mapping) in Django is a technique that allows developers to interact with a relational database (like MySQL, PostgreSQL, SQLite, etc.) using Python objects, rather than writing raw SQL queries. It essentially "maps" database tables to Python classes and rows to instances of those classes.

Here's how it works in a nutshell:

You define Python classes (models) in your Django app.

Django translates those Python classes into SQL queries, creating, retrieving, updating, and deleting records from the database on your behalf.

For example, if you have a model like this in Django:

class Book(models.Model):
    title = models.CharField(max_length=100)
    author = models.CharField(max_length=100)
    published_date = models.DateField()
This would translate into a table called Book in the database, with columns title, author, and published_date.

ORM in Django: Advantages
Abstraction: You don’t have to deal directly with SQL queries. You can use Python objects, making the code more readable and maintainable.

Database-Agnostic: You can switch databases (from MySQL to PostgreSQL, for example) without changing your models. Django’s ORM takes care of the specific SQL dialects for you.

Security: Django’s ORM helps protect against SQL injection by automatically escaping inputs when constructing queries.

What if you don’t want to use Django’s ORM with MySQL?
While Django provides a built-in ORM, you can still use raw SQL queries or integrate another ORM or database framework if you prefer. Here's what you could do:

Raw SQL: You can write raw SQL queries directly in Django. This is useful for complex queries or if you need more control over performance.
Example:
from django.db import connection

def get_books():
    with connection.cursor() as cursor:
        cursor.execute("SELECT * FROM myapp_book WHERE author = %s", ['J.K. Rowling'])
        return cursor.fetchall()
Third-Party ORMs: You can use other Python ORMs like SQLAlchemy or Peewee with Django, although Django's ORM is tightly integrated and recommended for most use cases.

MySQL-Specific Libraries: If you're working directly with MySQL, you could use libraries like PyMySQL or MySQLdb to communicate with the database. However, you’d be handling database connections and queries manually, which reduces some of the advantages of Django's abstraction.

***************************************************************
practical
***************************************************************
Django with MYSQL Database
C:\Users\jvrkr\git_repo\Django_projects\0010>Django-admin startproject blog

#Install Xampp Server and start the Apache and MYSQL services
#Select MYSQL Admin panel
#Click on new from left panel and give database name as blog and click on create.

Now modify the Setting.py file (Database part)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'blog',
        'USER': 'root',
        'PASSWORD': '',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}

