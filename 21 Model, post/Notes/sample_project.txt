In Django, models are Python classes that represent the structure of your database. They define the fields and behaviors of the data you want to store. Each model is essentially a blueprint for a table in your database. Django provides an abstraction layer that allows you to interact with the database using Python code instead of SQL queries.

Key Concepts:
Fields: Each attribute of the model represents a field in the database table.

Database Table: Django automatically creates a database table based on your model.

ORM (Object-Relational Mapping): Django provides an ORM that automatically converts model instances into SQL queries, so you don't have to write SQL manually.

How to Create Models in Django
To create a model in Django, you need to:

Define the model class: The class should inherit from django.db.models.Model.

Specify model fields: You define fields by adding attributes to the class, with each attribute corresponding to a field in the database.

***************************************************************
Project No:Sample_Project
Django Models: From Project Creation to Admin Panel
ðŸ“Œ 1. Create Django Project
Command (Practical):
>django-admin startproject Sample_Project
>cd Sample_Project
>python manage.py runserver

Explanation:
A project is the entire Django setup containing settings, URLs, apps, etc.

Running the server confirms that Django is installed and project structure is correct.

ðŸ“Œ 2. Create Django App
Command (Practical):
>python manage.py startapp blog

#Add this app in settings.py in Installed Apps

Explanation:
A Django app is a component of your project that handles a specific feature (e.g., blog, users, payments).

Projects can have multiple apps, each with its own models, views, and templates.

URL â†’ View â†’ Model â†’ Template â†’ Response

ðŸ“Œ 3. What is a Model?
Theory:
    A model is a Python class that represents a database table.
    Each attribute = a column in the database.

Django provides an ORM (Object Relational Mapper) to handle database queries in Python instead of writing SQL manually.

ðŸ‘‰ Example: If you define a Post model, Django creates a blog_post table in the database.

ðŸ“Œ 4. Create Models
Code (Practical): blog/models.py

from django.db import models
from datetime import datetime
class Post(models.Model):
    title = models.CharField(max_length=150)  # Short text field
    description = models.TextField() # Large text field
    author = models.CharField(max_length=50) # Author name
    created_at = models.DateTimeField(default=datetime.now)  # Date & Time
    is_published = models.BooleanField(default=False)        # True/False

    def __str__(self):
        return self.title

Explanation:
CharField â†’ short text (requires max_length).
TextField â†’ long text, no size limit.
DateTimeField â†’ stores date & time.
BooleanField â†’ True/False values.

__str__ â†’ defines how object appears (in Admin panel it shows title).

ðŸ“Œ 5. Apply Migrations
Command (Practical):
python manage.py makemigrations   # Generate migration files
python manage.py migrate          # Apply to database

Explanation:
makemigrations â†’ Converts models into migration files (like a blueprint).

migrate â†’ Applies migration to the database â†’ creates actual tables.

ðŸ“Œ 6. Create Superuser
Command (Practical):
    python manage.py createsuperuser

Fill in username, email, and password.

Explanation:
A superuser has full permissions and can manage everything in Django Admin panel.

ðŸ“Œ 7. Register Models in Admin
Code (Practical): blog/admin.py

from django.contrib import admin
from .models import Post

class PostAdmin(admin.ModelAdmin):
    list_display = ('id', 'title', 'author', 'created_at')
    list_display_links = ('title',)
    list_filter = ('created_at', 'author')

admin.site.register(Post, PostAdmin)

Explanation:
list_display â†’ shows selected fields in admin list view.

list_display_links â†’ makes fields clickable.

list_filter â†’ adds filtering options in admin sidebar.

ðŸ“Œ 8. Run & Test
Command (Practical):
python manage.py runserver

Go to: http://127.0.0.1:8000/admin
Login with superuser credentials.

Check if Post model appears.
Add/Edit/Delete posts.

Explanation:
Django Admin automatically provides a UI for database operations â†’ no SQL needed.

ðŸ“Œ 9. Summary
Model = Python class â†’ Database table.
Migration = Blueprint + Apply â†’ Creates/Updates tables.
Admin Panel = Web UI to manage models.

Workflow:
    Create project
    Create app
    Define model
    Run migrations
    Create superuser
    Register model in admin
    Run server â†’ test in Admin