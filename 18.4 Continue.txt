Great choice üéâ Let‚Äôs extend Project No: 22 Model_View_Template ‚Äì Sample_Project with CRUD (Create, Read, Update, Delete) functionality so users can manage posts directly from the frontend (not just through the Django Admin).

üìù Django Project Setup & CRUD Notes
1. Create a New Project
    django-admin startproject sample_project
    cd sample_project

Run the server (to test project setup):
    python manage.py runserver

Default Django page should be visible at:
üëâ http://127.0.0.1:8000/

2. Create an App
    python manage.py startapp myapp

Register myapp in sample_project/settings.py:
    INSTALLED_APPS = [
        ...
        'myapp',
    ]

3. Create the Model
File: myapp/models.py
    from django.db import models
    class Post(models.Model):
        title = models.CharField(max_length=100)
        content = models.TextField()
        author = models.CharField(max_length=50, default="Anonymous")
        created_at = models.DateTimeField(auto_now_add=True)

        def __str__(self):
            return self.title

Apply migrations:
    python manage.py makemigrations
    python manage.py migrate

(Optional) Register in admin:
File: myapp/admin.py
    from django.contrib import admin
    from .models import Post

    class PostAdmin(admin.ModelAdmin):
        list_display = ('id', 'title', 'author', 'created_at')
        list_display_links = ('title',)
        list_filter = ('created_at', 'author')

    admin.site.register(Post, PostAdmin)

4. Create a Form
File: myapp/forms.py
    from django import forms
    from .models import Post

    class PostForm(forms.ModelForm):
        class Meta:
            model = Post
            fields = ['title', 'content', 'author']

5. Create Views (CRUD)
File: myapp/views.py
    from django.shortcuts import render, redirect, get_object_or_404
    from .models import Post
    from .forms import PostForm

# READ - List posts
    def post_list(request):
        posts = Post.objects.all()
        return render(request, 'myapp/post_list.html', {'posts': posts})

# CREATE - Add new post
    def post_create(request):
        if request.method == "POST":
            form = PostForm(request.POST)
            if form.is_valid():
                form.save()
                return redirect('post_list')
        else:
            form = PostForm()
        return render(request, 'myapp/post_form.html', {'form': form})

# UPDATE - Edit post
    def post_update(request, pk):
        post = get_object_or_404(Post, pk=pk)
        if request.method == "POST":
            form = PostForm(request.POST, instance=post)
            if form.is_valid():
                form.save()
                return redirect('post_list')
        else:
            form = PostForm(instance=post)
        return render(request, 'myapp/post_form.html', {'form': form})

# DELETE - Remove post
    def post_delete(request, pk):
        post = get_object_or_404(Post, pk=pk)
        if request.method == "POST":
            post.delete()
            return redirect('post_list')
        return render(request, 'myapp/post_confirm_delete.html', {'post': post})

6. Configure URLs
File: myapp/urls.py
    from django.urls import path
    from . import views

    urlpatterns = [
        path('', views.post_list, name='post_list'),
        path('create/', views.post_create, name='post_create'),
        path('<int:pk>/edit/', views.post_update, name='post_update'),
        path('<int:pk>/delete/', views.post_delete, name='post_delete'),
    ]

Include app URLs in sample_project/urls.py:
    from django.contrib import admin
    from django.urls import path, include

    urlpatterns = [
        path('admin/', admin.site.urls),
        path('', include('myapp.urls')),
    ]

7. Create Templates
Folder: myapp/templates/myapp/
post_list.html
    <!DOCTYPE html>
    <html>
    <head><title>Posts</title></head>
    <body>
        <h1>All Posts</h1>
        <a href="{% url 'post_create' %}">‚ûï Add New Post</a>
        <hr>
        {% for post in posts %}
            <h3>{{ post.title }}</h3>
            <p>{{ post.content }}</p>
            <i>By {{ post.author }} | {{ post.created_at }}</i><br>
            <a href="{% url 'post_update' post.pk %}">‚úè Edit</a> |
            <a href="{% url 'post_delete' post.pk %}">üóë Delete</a>
            <hr>
        {% empty %}
            <p>No posts available.</p>
        {% endfor %}
    </body>
    </html>

post_form.html
    <!DOCTYPE html>
    <html>
    <head><title>Post Form</title></head>
    <body>
        <h1>{% if form.instance.pk %}Edit Post{% else %}New Post{% endif %}</h1>
        <form method="post">
            {% csrf_token %}
            {{ form.as_p }}
            <button type="submit">Save</button>
        </form>
        <a href="{% url 'post_list' %}">‚¨Ö Back to Posts</a>
    </body>
    </html>

post_confirm_delete.html
    <!DOCTYPE html>
    <html>
    <head><title>Delete Post</title></head>
    <body>
        <h1>Delete Post</h1>
        <p>Are you sure you want to delete "{{ post.title }}"?</p>
        <form method="post">
            {% csrf_token %}
            <button type="submit">Yes, Delete</button>
        </form>
        <a href="{% url 'post_list' %}">‚¨Ö Cancel</a>
    </body>
    </html>

8. Run & Test
    python manage.py runserver

‚û° Access URLs:
    List posts ‚Üí http://127.0.0.1:8000/
    Create post ‚Üí http://127.0.0.1:8000/create/
    Edit post ‚Üí http://127.0.0.1:8000/1/edit/
    Delete post ‚Üí http://127.0.0.1:8000/1/delete/

‚úÖ Final Workflow
Start project & app
Define model ‚Üí migrate
Create form
Write CRUD views
Configure URLs
Build templates
Run & test