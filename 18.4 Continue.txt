Great choice üéâ Let‚Äôs extend Project No: 0009 ‚Äì Sample_Project with CRUD (Create, Read, Update, Delete) functionality so users can manage posts directly from the frontend (not just through the Django Admin).

üìù Django CRUD: Posts Management
We‚Äôll implement:
    Create ‚Üí Add new post
    Read ‚Üí View all posts (already done)
    Update ‚Üí Edit a post
    Delete ‚Üí Remove a post

‚ö° Step 1: Update Model (already done)
We‚Äôll use the same Post model:
File: myapp/models.py
    from django.db import models

    class Post(models.Model):
        title = models.CharField(max_length=100)
        content = models.TextField()
        author = models.CharField(max_length=50, default="Anonymous")
        created_at = models.DateTimeField(auto_now_add=True)

        def __str__(self):
            return self.title

‚ö° Step 2: Create a Form
Instead of writing raw HTML forms, Django provides ModelForm.
File: myapp/forms.py
    from django import forms
    from .models import Post

    class PostForm(forms.ModelForm):
        class Meta:
            model = Post
            fields = ['title', 'content', 'author']

‚ö° Step 3: Update Views for CRUD
File: myapp/views.py
    from django.shortcuts import render, redirect, get_object_or_404
    from .models import Post
    from .forms import PostForm

# READ - List all posts
    def post_list(request):
        posts = Post.objects.all()
        return render(request, 'myapp/post_list.html', {'posts': posts})

# CREATE - Add a new post
    def post_create(request):
        if request.method == "POST":
            form = PostForm(request.POST)
            if form.is_valid():
                form.save()
                return redirect('post_list')
        else:
            form = PostForm()
        return render(request, 'myapp/post_form.html', {'form': form})

# UPDATE - Edit an existing post
    def post_update(request, pk):
        post = get_object_or_404(Post, pk=pk)
        if request.method == "POST":
            form = PostForm(request.POST, instance=post)
            if form.is_valid():
                form.save()
                return redirect('post_list')
        else:
            form = PostForm(instance=post)
        return render(request, 'myapp/post_form.html', {'form': form})

# DELETE - Delete a post
    def post_delete(request, pk):
        post = get_object_or_404(Post, pk=pk)
        if request.method == "POST":
            post.delete()
            return redirect('post_list')
        return render(request, 'myapp/post_confirm_delete.html', {'post': post})

‚ö° Step 4: Update URLs
File: myapp/urls.py
    from django.urls import path
    from . import views

    urlpatterns = [
        path('', views.post_list, name='post_list'),          # Read
        path('create/', views.post_create, name='post_create'), # Create
        path('<int:pk>/edit/', views.post_update, name='post_update'), # Update
        path('<int:pk>/delete/', views.post_delete, name='post_delete'), # Delete
    ]

‚ö° Step 5: Create Templates
1Ô∏è‚É£ List Posts (Read)
File: myapp/templates/myapp/post_list.html
    <!DOCTYPE html>
    <html>
    <head><title>Posts</title></head>
    <body>
        <h1>All Posts</h1>
        <a href="{% url 'post_create' %}">‚ûï Add New Post</a>
        <hr>
        {% for post in posts %}
            <h3>{{ post.title }}</h3>
            <p>{{ post.content }}</p>
            <i>By {{ post.author }} | {{ post.created_at }}</i><br>
            <a href="{% url 'post_update' post.pk %}">‚úè Edit</a> |
            <a href="{% url 'post_delete' post.pk %}">üóë Delete</a>
            <hr>
        {% empty %}
            <p>No posts available.</p>
        {% endfor %}
    </body>
    </html>

2Ô∏è‚É£ Post Form (Create + Update)
File: myapp/templates/myapp/post_form.html
    <!DOCTYPE html>
    <html>
    <head><title>Post Form</title></head>
    <body>
        <h1>{% if form.instance.pk %}Edit Post{% else %}New Post{% endif %}</h1>
        <form method="post">
            {% csrf_token %}
            {{ form.as_p }}
            <button type="submit">Save</button>
        </form>
        <a href="{% url 'post_list' %}">‚¨Ö Back to Posts</a>
    </body>
    </html>

3Ô∏è‚É£ Delete Confirmation
File: myapp/templates/myapp/post_confirm_delete.html
    <!DOCTYPE html>
    <html>
    <head><title>Delete Post</title></head>
    <body>
        <h1>Delete Post</h1>
        <p>Are you sure you want to delete "{{ post.title }}"?</p>
        <form method="post">
            {% csrf_token %}
            <button type="submit">Yes, Delete</button>
        </form>
        <a href="{% url 'post_list' %}">‚¨Ö Cancel</a>
    </body>
    </html>

‚ö° Step 6: Run & Test
Command:
    python manage.py runserver

‚û° URLs:
All Posts (Read): http://127.0.0.1:8000/
Create Post: http://127.0.0.1:8000/create/
Edit Post: http://127.0.0.1:8000/1/edit/
Delete Post: http://127.0.0.1:8000/1/delete/

‚úÖ Final Workflow
Create Project & App
Define Model
Run Migrations
Register in Admin (optional)
Create Forms
Write CRUD Views
Configure URLs
Build Templates
Test

üëâ Do you want me to also add Bootstrap styling to make the CRUD UI look professional (buttons, tables, etc.)?
