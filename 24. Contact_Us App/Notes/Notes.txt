Project Name: Project --- contact_us
Create contact us page and save the data
***************************************************************
>C:\Users\jvrkr\git_repo\Django_projects\0010>django-admin startproject Project

>C:\Users\jvrkr\git_repo\Django_projects\0010>cd Project

>C:\Users\jvrkr\git_repo\Django_projects\0010\Project>py manage.py startapp contact_us

#Modify settings.py
1. add app name in installed apps

2. Modify template dirs path ---'DIRS': [os.path.join(BASE_DIR,'templates')],

3. create templates folder
>C:\Users\jvrkr\git_repo\Django_projects\0010\Project>mkdir templates

4. create a file contact_us.html and success.html in templates folder.

5. Now create views.py in app level
# Create your views here.
from django.shortcuts import render, redirect

def contactus(request):
    if request.method == "POST":
        # process form data here
        # e.g., save to DB, send email, etc.
        return redirect('success')   # redirect to success view (GET)
    # GET -> show blank form
    return render(request, 'contact_us.html')

def success(request):
    return render(request, 'success.html')

6. Modify project level urls.py
from django.contrib import admin
from django.urls import path,include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('contact_us.urls')),
]

7. Create app level urls.py and append the code
from django.urls import path
from .views import contactus,success

urlpatterns=[
    path('',contactus,name='contactus'),
    path('success/',success,name='success')
]

8. Createsuperuser
C:\Users\jvrkr\git_repo\Django_projects\0010\Project>py manage.py createsuperuser

9. Now download or copy any contact us form from bootstrap code in contact_us.html
from like----> https://web3forms.com/examples

10. Now run this link http://127.0.0.1:8000/

11. Modify contact_us.html as per requirement and modify each element attribute name="name" like this all. 
Example:
<input type="text" class="form-control" id="nam" name="name" placeholder="Enter name" required>

#and Modify these below is very important
{% load static %} ----> Add at top if any images

<form class="contact-form" action="{% url 'contactus' %}" method="POST">

{% csrf_token %} --->It is a Django template tag that inserts a hidden security token into any HTML form that sends data via POST, PUT, or DELETE requests.

12. Create customised code for success.html 
<a href="{% url 'contactus' %}" class="back-link">Go back</a> ----> This is for Go back link.

13. Create models goto models.py and create models (Install this extention for auto code ---Djaneiro - Django Snippets)

from django.db import models
from datetime import datetime

# Create your models here.
class Contact(models.Model):
    name=models.CharField(max_length=100)
    email=models.EmailField(max_length=200)
    message=models.TextField()
    is_resolved=models.BooleanField(default=False)
    created_at=models.DateTimeField(default=datetime.now)

    class Meta:
        verbose_name = 'Contact'
        verbose_name_plural = 'Contacts'

    def __str__(self):
        return self.email

14. Register in admin.py
from django.contrib import admin
from .models import Contact
# Register your models here.

admin.site.register(Contact)

15. makemirations, migrate, runserver
>C:\Users\jvrkr\git_repo\Django_projects\0010\Project>py manage.py makemigrations

>C:\Users\jvrkr\git_repo\Django_projects\0010\Project>py manage.py migrate

>C:\Users\jvrkr\git_repo\Django_projects\0010\Project>py manage.py runserver

Go and verify model is created or not http://127.0.0.1:8000/admin/

16. Now modify view (Model to views)
#Modify contactus method
def contactus(request):
    if request.method == 'POST':
        # use .get with default '' to avoid KeyError
        name = request.POST.get('name', '').strip()
        email = request.POST.get('email', '').strip()
        message = request.POST.get('message', '').strip()   # match your template's name attr ('message')

        # Basic validation
        errors = []
        if not name:
            errors.append("Name is required.")
        if not email:
            errors.append("Email is required.")
        if not message:
            errors.append("Message is required.")

        if errors:
            # re-render the form with entered values + errors
            context = {'errors': errors, 'name': name, 'email': email, 'message': message}
            return render(request, 'contact_us.html', context)

        # Save to DB
        contact = Contact(name=name, email=email, message=message)
        contact.save()

        # Redirect to a success page (Post/Redirect/Get)
        return redirect('success')   # name of the success url pattern

    # GET request, show blank form
    return render(request, 'contact_us.html')

17. Modify contact_us.html form action and add csrf token.
<form action="" method="POST">{% csrf_token %}

>py manage.py runserver