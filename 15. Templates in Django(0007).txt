def sample(request):
return Httpresponce("<h1>Hello Welcome to Python</h1>")

Instead of creating views directly with html Code is difficult so we go for Templates.

Steps to Create Template:
    --Setup the templates folder
    --Setup DIRS in settings.py
    --Create a template
    --use template in views
    --execute the project

Creating Templates in Django Projects:
    --Create a 'templates' directory:
    --In your main project directory, create a folder named templates. If you are working on a specific app, it's good practice to create a templates directory inside your app directory, and then create another directory with the name of your app inside the templates directory.

Configure template settings:
    --In your settings.py file, ensure that the TEMPLATES setting is configured correctly. Specifically, check the DIRS option within the TEMPLATES setting to make sure it includes the path to your templates directory.
Python

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [os.path.join(BASE_DIR, 'templates')],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

Create HTML template files:
    --Inside the templates directory (or your app's templates directory), create your HTML files (e.g., home.html, about.html). These files will contain the structure and content of your web pages.

Write HTML and Django template syntax:
    --In your HTML files, you can use standard HTML along with Django's template language syntax. This allows you to insert dynamic content, use control structures (like loops and conditionals), and access variables passed from your views.
    --Variables: Use double curly braces {{ variable_name }} to display values from the context.
    --Tags: Use {% tag_name %} for logic and control flow, such as loops (for) and conditional statements (if).
    --Filters: Use filters to modify variable output, for example {{ variable_name|filter_name }}.

Load and render templates in views:
    --In your Django views, use the render() function to load and render your templates. Pass a context dictionary to the render() function containing the data you want to display in the template.
Python

    from django.shortcuts import render
    
    def my_view(request):
        context = {
            'variable1': 'Hello',
            'variable2': 'World',
        }
        return render(request, 'my_template.html', context)
        
Use template inheritance (optional): Create a base template with common elements (e.g., header, footer). Use the {% extends %} tag in other templates to inherit from the base template and the {% block %} tag to define replaceable content sections.