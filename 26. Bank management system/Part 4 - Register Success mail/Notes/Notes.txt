Now we are continue from Part3
In this we do gmail configuration for registration success.. After registration success the user can get mail with there details.

STEP BY STEP PROCESS:
-->Add secure Gmail SMTP settings to settings.py (use .env & to ignore commit use .gitignore).
-->Add email templates (templates/email/*).
-->Update views.py register function to send a welcome email (plain + HTML).
-->Run migrations, start server, and test registration & email sending.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
STEP 1:Add secure Gmail SMTP settings to settings.py (use .env & to ignore commit use .gitignore)

Firstly Create Google App Password:

Note: Use your own Gmail account (not the createsuperuser email) ‚Äî the one you want Django to send emails from.

1Ô∏è‚É£ EMAIL_HOST_USER
This is the Gmail address that Django will log in to and send outgoing mail from via Gmail‚Äôs SMTP server.

Example:
EMAIL_HOST_USER = "hietechsolutions@gmail.com"

. You can use any Gmail account (even your personal one) for development/testing.

. In production, it‚Äôs better to use a company/admin Gmail (e.g. hietechsolutions@gmail.com) so users see emails coming from your organization.

. This is not automatically tied to your Django superuser ‚Äî the superuser account is just a record in your app‚Äôs database, not an email sender.

2Ô∏è‚É£ EMAIL_HOST_PASSWORD
This is not your normal Gmail password ‚ùå
It must be a Google App Password ‚úÖ

Here‚Äôs what that means:
üîπ Why?
Google blocks normal password logins from third-party apps (like Django).
You must use a special password generated by Google called an App Password ‚Äî it‚Äôs a 16-character code.

üîπ How to create it
Log in to the Gmail account you want to send from (the same one you‚Äôll use in EMAIL_HOST_USER).

Go to: https://myaccount.google.com/security

Make sure 2-Step Verification is turned ON.
Then find the section ‚ÄúApp Passwords‚Äù (it appears only after 2-Step Verification is enabled).

Choose:
App: ‚ÄúMail‚Äù
Device: ‚ÄúOther‚Äù ‚Üí type ‚ÄúDjango SMTP‚Äù
Click Generate ‚Üí Google gives you a 16-character password (like abcd efgh ijkl mnop).

Copy that (without spaces) and paste it in EMAIL_HOST_PASSWORD="your_16_char_app_password" 

IMP NOTE: Instead of giving password directly Switch to the environment-variable method before deployment, because:
    You‚Äôll probably push your code to GitHub or a server.
    You don‚Äôt want plaintext passwords in your code.
    It‚Äôs more secure and flexible (you can rotate passwords easily).

------------------------------------------------------------------------------
For these follow below steps:
1) Install python-decouple
    conda activate venv    #In my case
    pip install python-decouple

2) Create the .env file (project root)
Create a file named .env in the project root ‚Äî the same folder as manage.py.

/path/to/your/project/.env
# .env - DO NOT COMMIT THIS FILE
EMAIL_HOST_USER="hietechsolutions@gmail.com"
EMAIL_HOST_PASSWORD="abcdefghijklmnop"   # <-- your 16-char Google App Password no spaces allowed
DEFAULT_FROM_EMAIL="HIE TECH SOLUTIONS <hietechsolutions@gmail.com>"
Replace abcdefghijklmnop with your actual 16-character Google App Password (no spaces).

3) Add .env to .gitignore
Open (or create) .gitignore in the project root and add:
# ignore environment file
.env

This prevents accidental commits of secrets.

4) Update settings.py to use decouple
Open your Django settings.py and replace the hardcoded email settings with the decouple config calls.
# settings.py Modify Like below
from decouple import config

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default=EMAIL_HOST_USER)
______________________________________________________________________________
STEP 2: Add email templates (templates/email/*).
-->Create email templates
-->Create directory templates/email/ and add two files.
-->templates/email/welcome_email.txt
Congrats {{ first_name }} {{ last_name }},

Your account has been successfully created at HIE TECH SOLUTIONS.

Here are your account details:
Name: {{ first_name }} {{ last_name }}
Email: {{ email }}
Account Number: {{ account_number }}

Please login to your dashboard:
http://127.0.0.1:8000/Mylogin/

Thanks,
HIE TECH SOLUTIONS Team

-->templates/email/welcome_email.html
<!doctype html>
<html>
  <body>
    <p>Congrats <strong>{{ first_name }} {{ last_name }}</strong>,</p>

    <p>Your account has been <strong>successfully created</strong> at <strong>HIE TECH SOLUTIONS</strong>.</p>

    <h4>Account details</h4>
    <ul>
      <li><strong>Name:</strong> {{ first_name }} {{ last_name }}</li>
      <li><strong>Email:</strong> {{ email }}</li>
      <li><strong>Account Number:</strong> {{ account_number }}</li>
    </ul>

    <p>Please <a href="http://127.0.0.1:8000/Mylogin/">click here to login</a> to your dashboard.</p>

    <p>Thanks,<br/>HIE TECH SOLUTIONS Team</p>
  </body>
</html>
______________________________________________________________________________
STEP 3:Update views.py register function to send a welcome email (plain + HTML).

from django.conf import settings
from django.template.loader import render_to_string
from django.core.mail import EmailMultiAlternatives

#Modify at ending of register method
subject = f"Congrats {first_name} {last_name} ‚Äî Your account is ready"
        from_email = getattr(settings, 'DEFAULT_FROM_EMAIL', settings.EMAIL_HOST_USER)
        to_email = [email]

        context = {'first_name': first_name, 'last_name': last_name,
                   'email': email, 'account_number': account_number}

        text_content = render_to_string('email/welcome_email.txt', context)
        html_content = render_to_string('email/welcome_email.html', context)

        try:
            msg = EmailMultiAlternatives(subject, text_content, from_email, to_email)
            msg.attach_alternative(html_content, "text/html")
            msg.send()
            messages.success(request, "Account created successfully! A confirmation email has been sent.")
        except Exception as e:
            # log error in real app; for now show warning
            messages.warning(request, "Account created, but confirmation email could not be sent.")
        return render(request, 'register.html')

    return render(request, 'register.html')
______________________________________________________________________________
STEP 4: Run migrations, start server, and test registration & email sending.
>py manage.py runserver

If any errors kindly verify first below these:
Quick immediate fix to check what Django is actually using

Open a terminal in your project root and run this one-liner to show what decouple reads (no server restart needed):

python manage.py shell -c "from decouple import config; print('USER:', config('EMAIL_HOST_USER')); print('PASS length:', len(config('EMAIL_HOST_PASSWORD')))"


Expected:
USER: should be your Gmail (e.g. hietechsolutions@gmail.com)
PASS length: should be 16
If you see anything else (empty user, length not 16), stop and fix .env 